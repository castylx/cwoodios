#!/home/castylx/miniconda3/envs/py311env/bin/python
import sys
from fractions import Fraction
from cwood import *
from fractions import Fraction
import coloredlogs, logging

logger = logging.getLogger(__name__)
debug  = False
#TODO - make it a command line tool
#TODO - finish upper and lower cabinets
#################################################################
# Takes a string and returns a Fraction value
#################################################################
def genf(value):
    lsvals = value.split()

    # Error checking in case we make a mistake when entering a Frac
    if (len(lsvals) > 2):
        print("ERROR ==> Unable to get Frac values from {}".format(value))
    # elif (len(lsvals) == 1) and ()

    # Check to see what we should return
    if (len(lsvals) == 1):
        num = lsvals[0]
        return Fraction(num)
    else:
        digit = int(lsvals[0])
        (numerators, denomitors) = lsvals[1].split("/")
        numerator = int(numerators)
        denomitor = int(denomitors)

        numerator = (denomitor*digit) + numerator
        return Fraction(numerator, denomitor)
    
    return None

####################################################################
# Asks the question from user and returns a Fraction representation
#####################################################################
def getf(msg, fallback=None):
    selection = None

    while (selection is None):
        try:
            if (fallback is None):
                selection = input("{:20} > ".format(msg))
            else:
                selection = input(msg + "(default:" + fallback + ") > ")
                if (selection == ""):
                    selection = fallback

            selection = genf(selection)
        except ValueError:
            print("Unable to process number, please enter again")
            selection = None

    return selection

def drawer():
    logger.info("Drawer Selected")

    title    = input("Drawer Description > ")
    width    = getf("Opening Width")
    height   = getf("Opening Height")
    depth    = getf("Cabinet Depth")
    overhang = getf("Overhang", "1/2")
    install = "3"

    while ((install != "0") and (install != "1")):
        print ("[0] - Face Frame")
        print ("[1] - Panel\n")

        install    = input("Is this a face frame or panel installation? (default face frame) > ")

    drawer = Drawer(title)
    drawer.set_logger(logger)
    drawer.set_ohang(overhang)
    drawer.set_opening(width, height, depth)

    if (install == "0"):
        drawer.set_install(Mount.FACEFRAME)
    else:
        drawer.set_install(Mount.PANEL)
    
    drawer.set_command("opening width : {} , opening height : {} , overhang : {}, rswidth : {}".format(CFrac(width), CFrac(height), CFrac(overhang), CFrac(rswidth)))

    print ("=====================  Drawer  Cutlist ====================")
    print ("     Assuming using bloom drawer slide {}      \n".format())
    drawer.print()
    print ("=============================================================")

    return drawer

def single_door():
    logger.info("Single Door Selected")
    title = input("Single Doors Description > ")

    width    = getf("Opening Width")
    height   = getf("Opening Height")
    overhang = getf("Overhang", "1/2")
    rswidth  = getf("Rails/Stiles Width ", "2 1/2")

    # Create Door
    door = Door(title, False)
    door.set_logger(logger)
    door.set_ohang(overhang)
    door.set_opening(width, height)
    door.set_rs_width(rswidth)
    door.set_command("opening width : {} , opening height : {} , overhang : {}, rswidth : {}".format(CFrac(width), CFrac(height), CFrac(overhang), CFrac(rswidth)))

    print ("=====================  Single Door Cutlist ====================")
    print ("     Assuming whitehead router bits w/ 3/8 inch channel      \n")
    door.print()
    print ("=============================================================")

    return door

def upper_cabinet():
    width    = getf("Width")
    height   = getf("Height", "42")
    rswidth  = getf("Rails and Stiles Width", "2 1/2")

    door.set_command("opening width : {} , opening height : {} , overhang : {}, rswidth : {}".format(CFrac(width), CFrac(height), CFrac(overhang), CFrac(rswidth)))
    cabinet = Cabinet("Upper Cabinets")

    return cabinet

def lower_cabinet():
    width    = getf("Width")
    height   = getf("Height", "32")
    numdrawers = getf("Number of Drawers", "0")

    return cabinet

def double_door():
    print("Double Door Selected")
    title = input("Double Doors Description > ")
    width    = getf("Opening Width")
    height   = getf("Opening Height")
    overhang = getf("Overhang", "1/2")
    rswidth  = getf("Rails/Stiles Width ", "2 1/2")

    # Create Door
    doors = Door(title, True)
    doors.set_logger(logger)
    doors.set_ohang(overhang)
    doors.set_opening(width, height)
    doors.set_rs_width(rswidth)

    print ("=====================  Double Door Cutlist ====================")
    print ("     Assuming whitehead router bits w/ 3/8 inch channel      \n")
    doors.print()
    print ("=============================================================")

    return doors

print("========================================\n")
print("Welcome to Fernando's cut list program!\n")
print("========================================\n")

# Keep track of all cut lists
cutlist = []

if (debug):
    coloredlogs.install(level='DEBUG', fmt='%(asctime)s [%(levelname)s] %(message)s')
else:
    coloredlogs.install(fmt='%(asctime)s [%(levelname)s] %(message)s')
try :
    while(True):
        print("Please select an option below :")
        print("\t (1) Single Door")
        print("\t (2) Double Door")
        print("\t (3) Drawer")
        print("\t (4) Upper Cabinet")
        print("\t (5) Lower Cabinet")
        print("\t (6) Generate PDF")
        print("\t (7) Exit")
        print("")
        selection = input("Selection > ")
        
        match selection:
            case "1":
                try: 
                    door = single_door()
                    cutlist.append(door)
                except KeyboardInterrupt:
                        print("\n")
            case "2":
                try:
                    doors = double_door()
                    cutlist.append(doors)
                except KeyboardInterrupt:
                    print("\n")
            case "3":
                try:
                    drawer = drawer()
                    cutlist.append(drawer)
                except KeyboardInterrupt:
                    print("\n")
            case "4":
                try:
                    cabinet = upper_cabinet()
                    cutlist.extend(cabinet)
                except KeyboardInterrupt:
                    print ("\n")
            case "5":
                try:
                    cabinet = lower_cabinet()
                    cutlist.extend(cabinet)
                except KeyboardInterrupt:
                    print("\n")
            case "6":
                if (len(cutlist) == 0):
                    logger.warning("Unable to generate cutlist, nothing has been generated thus far")
                else:
                    logger.info("Generating pdf for all projects")
                    project = input("What would you like to call this project ? > ")
                    filename = input("Please enter the filename > ")
                    if (filename.endswith(".pdf") == False):
                        filename = filename + ".pdf"

                    plan = Plans(project, filename, cutlist)
                    plan.generate()
                    logger.info("Done generating pdf for project {}".format(project))
            case "7":
                sys.exit(1)
            case "exit":
                sys.exit(1)
            case _:
                logger.warning("Selection {} does not exist".format(selection))
except KeyboardInterrupt:
    print("\n")
    sys.exit(1)

